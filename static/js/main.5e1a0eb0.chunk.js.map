{"version":3,"sources":["Components/Header/Header.jsx","Components/Artboard/Artboard.jsx","App.js","assets/images/algorand-algo-logo.svg","reportWebVitals.js","index.js"],"names":["myAlgoWallet","MyAlgo","algosdk","require","MyAlgoWallet","Header","Algodv2","mnemonicToSecretKey","props","state","connected","console","log","getAPIResponse","a","connect","accounts","addresses","map","account","address","setState","error","className","onClick","connectWallet","this","Component","Artboard","myRef","React","createRef","p","width","mouseIsDown","gridSize","setup","createCanvas","color","noStroke","colorSwitch","x","y","fill","rect","drawBackgroundLayer","draw","drawPixel","mouseDragged","mouseX","mouseY","gridNode","Math","floor","mousePressed","mouseReleased","myP5","p5","initalizeArtboard","current","ref","App","account_info","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e1a0eb0.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport MyAlgo from \"@randlabs/myalgo-connect\";\r\n\r\nconst myAlgoWallet = new MyAlgo();\r\n\r\nconst { MyAlgoWallet } = require(\"@randlabs/myalgo-connect\");\r\n\r\nconst algosdk = require(\"algosdk\");\r\n\r\nconst token = {\r\n  \"X-API-Key\": \"dNKutsYJR97M3WUuTeDMJ4EmYJpR1UhI1UhAi4Uo\",\r\n};\r\nconst server = \"https://testnet-algorand.api.purestake.io/ps2\";\r\nconst port = \"\";\r\n\r\nconst algodClient = new algosdk.Algodv2(token, server, port);\r\n\r\nlet secretKey =\r\n  \"rally umbrella garlic shiver medal embrace regret foam reject select custom dress just crazy benefit announce busy unable cereal head valve educate ride absorb regret\";\r\nlet recoveredAccount = algosdk.mnemonicToSecretKey(secretKey);\r\n\r\nlet account_info = \"\";\r\nlet acct_string = \"\";\r\n\r\n/*(async () => {\r\n  account_info =\r\n    acct_string = JSON.stringify(account_info);\r\n  console.log(\"Account Info: \" + acct_string);\r\n\r\n  this.setState({ account_info: (await algodClient.accountInformation(recoveredAccount.addr).do()) })\r\n})().catch(e => {\r\n  console.log(e)\r\n});*/\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      connected: \"Connect Wallet\",\r\n    };\r\n  }\r\n  connectWallet() {\r\n    console.log(\"connect\");\r\n    let getAPIResponse = async() => {\r\n      try {\r\n        const accounts = await myAlgoWallet.connect();\r\n\r\n        const addresses = accounts.map((account) => account.address);\r\n        console.log(addresses)\r\n        this.setState({\r\n          connected: addresses[0]\r\n        })\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n    getAPIResponse();\r\n  }\r\n  render() {\r\n    return (\r\n      <header className=\"bg-dark text-light col-12 d-flex justify-content-between align-items-center px-4 border border-2 border-secondary border-top-0 border-start-0 border-end-0 \">\r\n        <h1>Mastrocola.io</h1>\r\n        <button\r\n          className=\"btn btn-warning fs-5\"\r\n          onClick={() => this.connectWallet()}\r\n        >\r\n          {this.state.connected}\r\n        </button>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nexport default Header;\r\n","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport p5, { Color } from \"p5\";\r\n\r\nclass Artboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n  }\r\n  initalizeArtboard(p) {\r\n    let width = 400;\r\n    let height = 400;\r\n    let mouseIsDown = false;\r\n    let gridSize = width / 16;\r\n\r\n    let drawBackgroundLayer = () => {\r\n      let color = [p.color(255), p.color(150, 150, 150)];\r\n      p.noStroke();\r\n      let colorSwitch = 0;\r\n      for (let x = 0; x * gridSize < width; x++) {\r\n        for (let y = 0; y * gridSize < height; y++) {\r\n          //even number\r\n          if (colorSwitch % 2 === 0) {\r\n            p.fill(color[0]);\r\n          } else {\r\n            p.fill(color[1]);\r\n          }\r\n          p.rect(x * gridSize, y * gridSize, gridSize, gridSize);\r\n          colorSwitch++;\r\n        }\r\n        colorSwitch++;\r\n      }\r\n    };\r\n    p.setup = () => {\r\n      p.createCanvas(400, 400);\r\n      drawBackgroundLayer();\r\n      //p.background(255);\r\n    };\r\n\r\n    p.draw = () => {};\r\n    let drawPixel = (x, y) => {\r\n      p.fill(0);\r\n      p.noStroke();\r\n      p.rect(x * gridSize, y * gridSize, gridSize, gridSize);\r\n    };\r\n    p.mouseDragged = () => {\r\n      if (!mouseIsDown) return;\r\n      if (\r\n        p.mouseX >= 0 &&\r\n        p.mouseX < width &&\r\n        p.mouseY >= 0 &&\r\n        p.mouseY < height\r\n      ) {\r\n        let gridNode = [\r\n          Math.floor(p.mouseX / gridSize),\r\n          Math.floor(p.mouseY / gridSize),\r\n        ];\r\n        p.fill(0);\r\n        p.noStroke();\r\n        drawPixel(gridNode[0], gridNode[1]);\r\n      }\r\n    };\r\n    p.mousePressed = () => {\r\n      mouseIsDown = true;\r\n      if (\r\n        p.mouseX >= 0 &&\r\n        p.mouseX < width &&\r\n        p.mouseY >= 0 &&\r\n        p.mouseY < height\r\n      ) {\r\n        let gridNode = [\r\n          Math.floor(p.mouseX / gridSize),\r\n          Math.floor(p.mouseY / gridSize),\r\n        ];\r\n        p.fill(0);\r\n        p.noStroke();\r\n        drawPixel(gridNode[0], gridNode[1]);\r\n      }\r\n    };\r\n    p.mouseReleased = () => {\r\n      mouseIsDown = false;\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.myP5 = new p5(this.initalizeArtboard, this.myRef.current);\r\n  }\r\n  render() {\r\n    return (\r\n      <main className=\"col-12 bg-secondary d-flex justify-content-center flex-column align-items-center\">\r\n        <h2>Pixel Editor</h2>\r\n        <div ref={this.myRef}></div>\r\n        <button className=\"btn btn-primary\">Submit</button>\r\n      </main>\r\n    );\r\n  }\r\n}\r\nexport default Artboard;\r\n","import './App.css';\r\nimport { Component } from 'react';\r\nimport Header from './Components/Header/Header.jsx';\r\nimport Artboard from './Components/Artboard/Artboard.jsx';\r\nimport algorandLogo from './assets/images/algorand-algo-logo.svg';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account_info: ''\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <Artboard />\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/algorand-algo-logo.2015fd2c.svg\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}